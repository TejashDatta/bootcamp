Ruby tool 2:
リファクタリングをしました。

ソフトウェアの設計について学んだこと：
ーUML図の描き方 
ーMemento pattern
ーState pattern

ツール１とツール２の開発を通して学んだこと：

機能について：
文字列をParseメッソドを通してDateやTimeのオブジェクトにする
ホームディレクトリの取得
あるディレクトリの中にあるすべてのファイルとディレクトリの名前の取得 (Dir.children, Dir.each_child)

TimeオブジェクトをDateオブジェクトに変換
実行しいるファイルのパスの取得
APIを叩く
JSONを扱う
環境変数の設定と取得



設計とプログラミングの原則について：
クラス名.メッソド名という形にすれば、クラス名は主語だとメッソド名は述語だとしたら英語的に自然的に聞こえるべき。
ツールをコマンドラインから実行するため特別なクラスを作成しないで、主なクラスの中にrunというメッソドを用意して、そのファイルがコマンドラインから実行さればrunメッソドを呼び出す。
各命名の重要さ。
勝手に複雑な設計にしない。例えば必要だけ数のクラスを定義して、継承とモジュールに依存しすぎない。
一時変数をなるべく避ける。その方法は：代わりにメッソドを使用、直接に表現を使用。要約に、命令形プログラミングより関数型プログラミングにするように。
命名に冗長な言葉を含めないように。
どのような言葉は冗長？幅広い一般的で内容の具体的な属性を特定しない言葉は冗長。
initializeメッソドに複雑なブロックや合理を記述しないで、他のメッソドに切り出す。
できるだけコードを共通化。
データをオブジェクトに格納。
オブジェクトの初期化では他のオブジェクト（例えばAPIのレスポンス）の設計に依存しないで、できるだけインスタンス変数を直接の助変数で初期化。
一つのコマンドや関数やクラスは役割が多くならないべき。

他の気づき：
問題を解決するとき、まずは解決に集中して、最適なリファクタリングは解決後に考えるべき。
機能は最初はもっとも基本的な機能を実装して、それはよければ機能の伸ばしに進む。

