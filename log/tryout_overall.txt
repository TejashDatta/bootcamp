ruby tool 3感想：
先のツールの開発を通して学んだことを活かしたのでもっとスームズに進んだと思います。ツール２と比べたら、命名は最初からもっと記述的でした。妙な修正の点以外は、一般的な気づいたことは命名の統一の重要さだとインスタンス変数の適当な使用です。

Tryout全体感想：

ツールの開発を通して設計についてはどの点に集中すべきか、どの点が詳しく検討しなくてもいいかということなどに対しての意識を高めたと思います。
どのような命名と代入は冗長か勉強になりました。
求められるコードの形をもっと深く理解できました。
どの場合にブロックを関数に抽斗したらいいですか。

Tryoutで教材から勉強したこと：
ー　gitのコマンドと使い方
ー　シェルのコマンドとスクリプト
ー　rubyの機能
ー　日本語でプログラミングの専門用語

3つのツールの開発を通して学んだり、気づいたりしたこと：

Tryoutでツールの開発に取り組んだときに最も成長できたと思います。前にも個人的にプロジェクトの開発に取り組んだ経験がありますが、それらは他者に確認されたことがないので設計の調子などはどうでしたかわかりませんでした。どのように設計すべきかわかりませんでした。ツールの開発を通してこのところに上達できたと思います。

多くの場合はコードがレビューされた後、どのように修正すべきかすぐに考えつかなかったが、検討を続けた結果、進捗ができて、またレビューされ、結局最適なコードにできました。自分が最初のうち立ち往生したが結局乗り越えることができたので、直面している問題に集中して解決できるという自信が上がりました。

具体的に設計について習ったこと：
ー　プログラムをどのぐらいシンプルにすべきか、そうする方法
ー　他者が自分が書いたコードを読む時どう思うかという意識を高めました
ー　冗長と余計に長い命名の見極め
ー　不要な変数の見極め
ー　抽象的な概要をオブジェクト化
ー　オブジェクトはどの関数を持つべきか、その決め方
ー　コードを簡潔する方法
ー　求められるコードの形をもっと深く理解
ー　設計に対してどの部分は深く考えるべき、どの部分はそうしなくてもいいか

プログラミングについて学んだ原則（先のログを重複）：

クラス名.メッソド名という形にすれば、クラス名は主語だとメッソド名は述語だとしたら英語的に自然的に聞こえるべき。
ツールをコマンドラインから実行するため特別なクラスを作成しないで、主なクラスの中にrunというメッソドを用意して、そのファイルがコマンドラインから実行さればrunメッソドを呼び出す。
各命名の重要さ。
勝手に複雑な設計にしない。例えば必要だけ数のクラスを定義して、継承とモジュールに依存しすぎない。
一時変数をなるべく避ける。その方法は：代わりにメッソドを使用、直接に表現を使用。要約に、命令形プログラミングより関数型プログラミングにするように。
命名に冗長な言葉を含めないように。
どのような言葉は冗長？幅広い一般的で内容の具体的な属性を特定しない言葉は冗長。
initializeメッソドに複雑なブロックや合理を記述しないで、他のメッソドに切り出す。
できるだけコードを共通化。
データをオブジェクトに格納。
オブジェクトの初期化では他のオブジェクト（例えばAPIのレスポンス）の設計に依存しないで、できるだけインスタンス変数を直接の助変数で初期化。
一つのコマンドや関数やクラスは役割が多くならないべき。
