ウィキペディアによると：「オブジェクト指向プログラミングとは、互いに密接な関連性を持つデータとメソッドをひとつにまとめてオブジェクトとし、それぞれ異なる性質と役割を持たせたオブジェクトの様々な定義と、それらオブジェクトを相互に作用させる様々なプロセスの設定を通して、プログラム全体を構築するソフトウェア開発手法である。」

基本的にオブジェクト指向プログラミングではデータとそのデータに演算する関数はひとまとめように置かれます。関係があるデータとそのデータを取得と変更する関数（メソッド）が一つの体としてまとめらます。その手法をこなすようにいくつの特徴が実現されます。

オブジェクト指向プログラミングの特徴：

１）カプセル化：
ウィキペディアによろと「一定の関連性を持つデータ（変数、プロパティ、フィールド、属性）と、それらを操作するメソッド（関数）をひとまとめにしてオブジェクトとし、外部に対して必要とされるデータとメソッドのみを公開し、それ以外を内部に隠蔽する仕組みがカプセル化と呼ばれる。」

カプセル化によって関係があるデータとそのデータを取得と変更するメソッドが一つの場所に定義されます。この特徴によって、外部からデータの直接な変更と取得に防ぐことができて、データの抽象化を行えます。そして、外部に絶対的に公開しないデータを隠蔽して情報隠蔽を行えます。要するに、カプセル化によってオブジェクトのインタフェースを設定できます。

２）継承：
ウィキペディアによろと「既存オブジェクトのデータ構成とメソッド構成を引き継いで、新しい派生オブジェクトを定義する仕組みが継承と呼ばれる。」継承によってあるクラスが他のクラスのデータとメソッドを引き継ぐことができます。それによって、複数のクラスが共通するデータと機能の抽象化ができます。継承を通して仮想クラスで仮想関数を使って、インタフェースだけを定義できます。そしてこの仮想クラスを継承して多種の子クラスが同じインタフェースを持てます。

３）多態性：
基本的に多態性の意味は「一つの名前で複数の関数」。ウィキペディアによろと「異なる種類のオブジェクトに同一の操作インターフェースを持たせる仕組みが多態性と呼ばれる。オブジェクト指向下の多態性は、クラスの派生関係またはオブジェクトの動的バインディング機能によって、コンパイル時のメソッド名から呼び出されるプロセス内容が実行時に決定される。」

多態性によって多重のクラスが同じインタフェースを持たせることはできます。
多重ディスパッチ：多態性によって引数の型によってに関数の識別ができます（ちなみにrubyとpythonのような動的型付けの言語ではできません）。単一ディスパッチの場合にオブジェクト型によって実行時に当たる関数を指定します。
